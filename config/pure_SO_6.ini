[Seiberg-Witten data]
casimir_differentials = {4: (mu/(z*z_r) + u_4 + (z*z_r))/((z*z_r)^4),
                         6: (u_3^2)/((z*z_r)^6),
                         2: u_2/((z*z_r)^2)}
root_system = D3
representation = 1
irregular_punctures = [0, oo]
#differential_parameters = {mu: 5-5*I, u_2: 1+I, u_4: 3 + I, u_6: (1+I)^(3.0/2.0)}
#differential_parameters = {z_r: 1.0, mu : (5.0 - 5.0*I)/0.3, u_2: (1.0 + I)/2.0,  u_4: (3.0 + I)/2.0, u_6 : (1 + I)^(3.0/2.0)}
#differential_parameters = {z_r: 1.0-I, mu : (5.0 + 5.0*I)/0.5, u_2: (1.0 + I)/2.0,  u_4: (3.0 + I)/2.0, u_3 : (1 + I)^(3.0/2.0)}
differential_parameters = {z_r: 1, mu : 1, u_2: 0,  u_4: 0, u_3 : 0}
# Mobius transformation parameters
#mt_params = [[I,-I],[1,1]]
ramification_point_finding_method = discriminant 
#ramification_point_finding_method = system_of_eqs 

[numerical parameters]

#default range as [[z.real.min, z.real.max], [z.imag.min, z.imag.max]]
plot_range = [[-5, 5], [-5, 5]]

num_of_steps = 5000 
num_of_iterations = 3
size_of_small_step = 1e-3
size_of_large_step = 2e-2

size_of_bp_neighborhood = 10 * %(size_of_small_step)s
size_of_puncture_cutoff = 2 * %(size_of_small_step)s
#size_of_ramification_pt_cutoff = 1e-3

accuracy = 1e-6

# Number of processes to spawn. 
# Set to 0 to utilize maximum number of cores available,
# Set to -n, n > 0, to leave n CPUs out of the process pool.
#n_processes = 0

phase = [1e-1, 3.141592, 80]
mass_limit = 5.0
