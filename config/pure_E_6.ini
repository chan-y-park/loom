[Seiberg-Witten data]

#casimir_differentials = {3: 1/(z^12)*(z + 1/z)}

# with 3rd (class S) convention:
casimir_differentials = {2: u_2 / (z^2), 5: u_5 / (z^5) , 6: u_6 / (z^6) ,8: u_8 / (z^8) ,9: u_9 / (z^9) ,12: (z + u_12 + 1/z)/ (z^(12)) }

# with 1st convention:
#casimir_differentials = {2: u_2 , 5: u_5  , 6: u_6  ,8: u_8  ,9: u_9 ,12: u_12 }

# with 2nd convention:
#casimir_differentials = {2: u_2 , 5: u_5  , 6: u_6  ,8: u_8  ,9: u_9 ,12: (z + u_12 + 1/z )}

root_system = E6
representation = 1

irregular_punctures = [0, oo]

#differential_parameters = {u_2 : .1, u_5 : .1, u_6 : .1, u_8 : .1, u_9 : .1, u_12 : .1}

differential_parameters = {u_2 : 0, u_5 : 0, u_6 : 0, u_8 : 0, u_9 : 0, u_12 : 0}

# Mobius transformation parameters
# mt_params = [[1, 0], [0, 1]]
#mt_params = None 
ramification_point_finding_method = discriminant 
#ramification_point_finding_method = system_of_eqs 

[numerical parameters]

#default range as [[z.real.min, z.real.max], [z.imag.min, z.imag.max]]
plot_range = [[-5, 5], [-5, 5]]

num_of_steps = 5000 
num_of_iterations = 1
size_of_small_step = 1e-3
size_of_large_step = 1e-3

size_of_bp_neighborhood = 10 * %(size_of_small_step)s
#size_of_puncture_cutoff = 2 * %(size_of_small_step)s
#size_of_ramification_pt_cutoff = 1e-3

accuracy = 1e-6

# Number of processes to spawn. 
# Set to 0 to utilize maximum number of cores available,
# Set to -n, n > 0, to leave n CPUs out of the process pool.
n_processes = 30

mass_limit = 6.0
phase = [1e-6, 3.141592, 100]
