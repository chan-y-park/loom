# This is the config file for a class S theory of A_3 type
# one a sphere with four punctures.
# At x_1, x_2, x_3 we have punctures of types [2,2]
# while at x_4 we have a puncture of type [2,1,1]
# The residues are for the former
# phi = (dz / z) diag(m_i, m_i , -m_i, -m_i)
# with i=1,2,3. For the last puncture it's
# phi = (dz / z) diag(m_4, m_4, m_5, -2 * m_4 - m_5)

[Seiberg-Witten data]

casimir_differentials = {2: (4 * m_1^2 * (x_1-x_2) * (x_1-x_3) * (x_1-x_4) * (z-x_2) * (z-x_3) * (z-x_4)+4 * m_2^2 * (x_2-x_1) * (x_2-x_3) * (x_2-x_4) * (z-x_1) * (z-x_3) * (z-x_4)+4 * m_3^2 * (x_3-x_1) * (x_3-x_2) * (x_3-x_4) * (z-x_1) * (z-x_2) * (z-x_4)+2 * (3 * m_4^2+2 * m_5 * m_4+m_5^2) * (x_4-x_1) * (x_4-x_2) * (x_4-x_3) * (z-x_1) * (z-x_2) * (z-x_3)) / ((z-x_1)^2 * (z-x_2)^2 * (z-x_3)^2 * (z-x_4)^2) + (u_2) / ((z-x_1) * (z-x_2) * (z-x_3) * (z-x_4)), 3: -(6 * m_4 * (m_4+m_5)^2 * (x_4-x_1)^2 * (x_4-x_2)^2 * (x_4-x_3)^2) / ((z-x_1)^2 * (z-x_2)^2 * (z-x_3)^2 * (z-x_4)^3), 4: (4 * m_1^4 * (x_1-x_2)^3 * (x_1-x_3)^3 * (x_1-x_4)^3 * (z-x_2) * (z-x_3) * (z-x_4)+4 * m_2^4 * (x_2-x_1)^3 * (x_2-x_3)^3 * (x_2-x_4)^3 * (z-x_1) * (z-x_3) * (z-x_4)+4 * m_3^4 * (x_3-x_1)^3 * (x_3-x_2)^3 * (x_3-x_4)^3 * (z-x_1) * (z-x_2) * (z-x_4)+(2 * m_4^4+m_5^4+(2 * m_4+m_5)^4) * (x_4-x_1)^3 * (x_4-x_2)^3 * (x_4-x_3)^3 * (z-x_1) * (z-x_2) * (z-x_3)) / ((z-x_1)^4 * (z-x_2)^4 * (z-x_3)^4 * (z-x_4)^4)+ (u_4 ) / ((z-x_1)^2 * (z-x_2)^2 * (z-x_3)^2 * (z-x_4)^2)}


root_system = A3
representation = 1
irregular_punctures = []

# regular_punctures = [2*I, -2*I, 2, -2]
#differential_parameters = {u_2 : 0, u_4 : 0, m_4 : 1, m_1 : (1+I)/2, m_2 : I/2, m_3 : -1/2, m_5 : I/3, x_1 : 2, x_2 : -2, x_3 : 2*I, x_4 : -2*I}

regular_punctures = [1+I, -1-I, I-1, -I+1]
differential_parameters = {u_2 : 0, u_4 : 0, m_1 : 1, m_2 : -1, m_3 : I, m_4 : 1, m_5 : -I, x_1 : 1+I, x_2 : -1-I, x_3 : I-1, x_4 : -I+1}


# Mobius transformation parameters
# mt_params = None 
ramification_point_finding_method = discriminant 
# ramification_point_finding_method = system_of_eqs 

[numerical parameters]

#default range as [[z.real.min, z.real.max], [z.imag.min, z.imag.max]]
plot_range = [[-5, 5], [-5, 5]]

num_of_steps = 5000 
num_of_iterations = 3
size_of_small_step = 1e-3
size_of_large_step = 2e-2
size_of_bp_neighborhood = 10 * %(size_of_small_step)s
accuracy = 1e-6

# Number of processes to spawn. 
# Set to 0 to utilize maximum number of cores available,
# Set to -n, n > 0, to leave n CPUs out of the process pool.
#n_processes = 30

mass_limit = 15.0
phase = [1e-6, 3.141592, 80]
